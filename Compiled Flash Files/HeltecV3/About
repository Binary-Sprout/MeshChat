Overview of the Program
This program is a mesh-based chat system combined with an OLED display animation, running on an ESP32 or compatible microcontroller. The system allows multiple nodes to connect and communicate within a mesh network while displaying data and animations on an OLED screen. It features a bouncing ball animation as a screensaver that runs periodically, along with mesh network functionality to display connected nodes and messages.

Key Components and Functionality
Mesh Network Communication:

The program utilizes the painlessMesh library to create a mesh network. This allows multiple devices to connect and communicate with each other without relying on a traditional Wi-Fi access point.
Each device (node) can send and receive messages to and from other nodes within the mesh network. This is handled by the receivedCallback() function, which processes incoming messages and updates the display accordingly.
Wi-Fi and Web Server Integration:

The ESP32 operates in Access Point (AP) mode, providing a Wi-Fi network for clients to connect to.
An asynchronous web server (ESPAsyncWebServer) serves HTML pages to connected clients. The main page allows users to enter messages that are broadcasted across the mesh network.
The server also serves JSON endpoints to provide data about messages, connected nodes, and device counts, which are dynamically updated on the HTML pages.
OLED Display:

The OLED screen is managed by the U8g2 library, which is used to render text and animations on the display.
The display is updated regularly with mesh network information, including node IDs and the number of connected nodes.
The screensaver, which consists of bouncing balls, is shown periodically to prevent screen burn-in and add a visual element to the device when not in active use.
Bouncing Ball Animation:

The program features an animation of multiple balls that bounce around the OLED display, reflecting off the screen edges and colliding with each other.
The balls are initialized with random positions and speeds, ensuring a dynamic and engaging visual effect each time the screensaver runs.
The balls' movements are carefully managed to stay within screen boundaries, with collision detection ensuring realistic bouncing behavior when they collide.
User Interface and Interaction:

Users interact with the system through a web-based interface served by the ESP32. They can send messages, view the mesh nodes connected, and see real-time updates about the network.
The main page provides a form to send messages, which are then broadcast across the mesh network and displayed on connected nodes.
Error Handling and Feedback:

The system continuously monitors mesh connections and updates the display accordingly. Changes in the mesh network, such as nodes joining or leaving, are handled gracefully.
The program also aims to provide some level of feedback when connection issues arise, ensuring that users are informed of the current network status.
Key Features
Mesh Networking: Decentralized communication that allows devices to relay messages between nodes without relying on a central router.
Dynamic Web Server: Serves interactive pages, allowing users to send messages and view mesh node details directly from their browsers.
OLED Screensaver Animation: The bouncing ball screensaver provides a visually appealing and dynamic display when the system is idle.
Collision Detection: Balls not only bounce off the edges of the display but also interact with each other, enhancing the realism of the animation.
Potential Improvements
Additional Animations: Other screensaver animations could be added to rotate between different visual effects, making the display more engaging.
User Notifications: More explicit notifications on the OLED screen or web interface when a connection is lost or reestablished would improve user experience.
Mesh Health Monitoring: Implementing a system to monitor the health and performance of the mesh network, such as latency or packet loss, could provide valuable diagnostics.
Conclusion
This program effectively combines mesh networking with a visually appealing OLED animation, creating a versatile and engaging tool for communication and display. It demonstrates the power of mesh technology in a microcontroller environment, providing both functional and aesthetic value to users.
